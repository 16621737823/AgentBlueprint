// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.2
// source: functionDistribute.proto

package message

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	APMFunctionsService_InsertActionWithObservation_FullMethodName = "/protoData.APMFunctionsService/InsertActionWithObservation"
	APMFunctionsService_ActionFormatter_FullMethodName             = "/protoData.APMFunctionsService/ActionFormatter"
)

// APMFunctionsServiceClient is the client API for APMFunctionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APMFunctionsServiceClient interface {
	InsertActionWithObservation(ctx context.Context, in *GeneralPyRequest, opts ...grpc.CallOption) (*ActionList, error)
	ActionFormatter(ctx context.Context, in *Action, opts ...grpc.CallOption) (*ParsedAction, error)
}

type aPMFunctionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAPMFunctionsServiceClient(cc grpc.ClientConnInterface) APMFunctionsServiceClient {
	return &aPMFunctionsServiceClient{cc}
}

func (c *aPMFunctionsServiceClient) InsertActionWithObservation(ctx context.Context, in *GeneralPyRequest, opts ...grpc.CallOption) (*ActionList, error) {
	out := new(ActionList)
	err := c.cc.Invoke(ctx, APMFunctionsService_InsertActionWithObservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aPMFunctionsServiceClient) ActionFormatter(ctx context.Context, in *Action, opts ...grpc.CallOption) (*ParsedAction, error) {
	out := new(ParsedAction)
	err := c.cc.Invoke(ctx, APMFunctionsService_ActionFormatter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// APMFunctionsServiceServer is the server API for APMFunctionsService service.
// All implementations must embed UnimplementedAPMFunctionsServiceServer
// for forward compatibility
type APMFunctionsServiceServer interface {
	InsertActionWithObservation(context.Context, *GeneralPyRequest) (*ActionList, error)
	ActionFormatter(context.Context, *Action) (*ParsedAction, error)
	mustEmbedUnimplementedAPMFunctionsServiceServer()
}

// UnimplementedAPMFunctionsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAPMFunctionsServiceServer struct {
}

func (UnimplementedAPMFunctionsServiceServer) InsertActionWithObservation(context.Context, *GeneralPyRequest) (*ActionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertActionWithObservation not implemented")
}
func (UnimplementedAPMFunctionsServiceServer) ActionFormatter(context.Context, *Action) (*ParsedAction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionFormatter not implemented")
}
func (UnimplementedAPMFunctionsServiceServer) mustEmbedUnimplementedAPMFunctionsServiceServer() {}

// UnsafeAPMFunctionsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APMFunctionsServiceServer will
// result in compilation errors.
type UnsafeAPMFunctionsServiceServer interface {
	mustEmbedUnimplementedAPMFunctionsServiceServer()
}

func RegisterAPMFunctionsServiceServer(s grpc.ServiceRegistrar, srv APMFunctionsServiceServer) {
	s.RegisterService(&APMFunctionsService_ServiceDesc, srv)
}

func _APMFunctionsService_InsertActionWithObservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeneralPyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMFunctionsServiceServer).InsertActionWithObservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APMFunctionsService_InsertActionWithObservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMFunctionsServiceServer).InsertActionWithObservation(ctx, req.(*GeneralPyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _APMFunctionsService_ActionFormatter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Action)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(APMFunctionsServiceServer).ActionFormatter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: APMFunctionsService_ActionFormatter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(APMFunctionsServiceServer).ActionFormatter(ctx, req.(*Action))
	}
	return interceptor(ctx, in, info, handler)
}

// APMFunctionsService_ServiceDesc is the grpc.ServiceDesc for APMFunctionsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var APMFunctionsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protoData.APMFunctionsService",
	HandlerType: (*APMFunctionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertActionWithObservation",
			Handler:    _APMFunctionsService_InsertActionWithObservation_Handler,
		},
		{
			MethodName: "ActionFormatter",
			Handler:    _APMFunctionsService_ActionFormatter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "functionDistribute.proto",
}
